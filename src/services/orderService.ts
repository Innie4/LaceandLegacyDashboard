// Mock orderService for frontend-only use
export const orderService = {
  getOrders: async () => Promise.resolve([]),
  getOrder: async (id: string) => Promise.resolve({
    id,
    status: 'pending',
    paymentStatus: 'pending',
    items: [],
    orderNumber: '1001',
    subtotal: 0,
    tax: 0,
    shipping: 0,
    total: 0,
    customerName: 'Demo Customer',
    customerEmail: 'demo@example.com',
  }),
  updateOrderStatus: async (id: string, status: string) => Promise.resolve({
    id,
    status,
    paymentStatus: 'pending',
    items: [],
    orderNumber: '1001',
    subtotal: 0,
    tax: 0,
    shipping: 0,
    total: 0,
    customerName: 'Demo Customer',
    customerEmail: 'demo@example.com',
  }),
  updatePaymentStatus: async (id: string, paymentStatus: string) => Promise.resolve({
    id,
    status: 'pending',
    paymentStatus,
    items: [],
    orderNumber: '1001',
    subtotal: 0,
    tax: 0,
    shipping: 0,
    total: 0,
    customerName: 'Demo Customer',
    customerEmail: 'demo@example.com',
  }),
  createOrder: async (order: any) => Promise.resolve({ ...order, id: '1' }),
  deleteOrder: async (id: string) => Promise.resolve(),
  getOrderStats: async () => Promise.resolve({
    total: 0,
    pending: 0,
    processing: 0,
    shipped: 0,
    delivered: 0,
    cancelled: 0,
    totalRevenue: 0,
  }),
  exportOrders: async () => Promise.resolve(new Blob()),
}; 